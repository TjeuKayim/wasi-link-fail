on: [push, pull_request, workflow_dispatch]
name: Continuous Integration

jobs:
  build-45:
    name: Build Rust 1.45.2
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.45.2
          profile: minimal
          target: wasm32-wasi
          override: true
      - run: |
          sudo apt install libtinfo5
          wget https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-11/wasi-sdk_11.0_amd64_ubuntu20.04.deb
          sudo dpkg -i wasi-sdk_11.0_amd64_ubuntu20.04.deb
          rm wasi-sdk_11.0_amd64_ubuntu20.04.deb
        shell: bash
      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: --target wasm32-wasi
        env:
          CC_wasm32_wasi: /opt/wasi-sdk/bin/clang
          CARGO_TARGET_WASM32_WASI_LINKER: /opt/wasi-sdk/bin/clang
  build-46:
    name: Build Rust 1.46.0
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.46.0
          profile: minimal
          target: wasm32-wasi
          override: true
      - run: |
          sudo apt install libtinfo5
          wget https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-11/wasi-sdk_11.0_amd64_ubuntu20.04.deb
          sudo dpkg -i wasi-sdk_11.0_amd64_ubuntu20.04.deb
          rm wasi-sdk_11.0_amd64_ubuntu20.04.deb
        shell: bash
      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: --target wasm32-wasi
        env:
          CC_wasm32_wasi: /opt/wasi-sdk/bin/clang
          CARGO_TARGET_WASM32_WASI_LINKER: /opt/wasi-sdk/bin/clang
  build-46v:
    name: Build Rust 1.46.0 with -Wl,-v
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.46.0
          profile: minimal
          target: wasm32-wasi
          override: true
      - run: |
          sudo apt install libtinfo5
          wget https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-11/wasi-sdk_11.0_amd64_ubuntu20.04.deb
          sudo dpkg -i wasi-sdk_11.0_amd64_ubuntu20.04.deb
          rm wasi-sdk_11.0_amd64_ubuntu20.04.deb
        shell: bash
      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: --target wasm32-wasi
        env:
          CC_wasm32_wasi: /opt/wasi-sdk/bin/clang
          CARGO_TARGET_WASM32_WASI_LINKER: /opt/wasi-sdk/bin/clang
          RUSTFLAGS: '-C target-feature=-crt-static -C link-args=-Wl,-v'
  build-47:
    name: Build Rust 1.47.0
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.47.0
          profile: minimal
          target: wasm32-wasi
          override: true
      - run: |
          sudo apt install libtinfo5
          wget https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-11/wasi-sdk_11.0_amd64_ubuntu20.04.deb
          sudo dpkg -i wasi-sdk_11.0_amd64_ubuntu20.04.deb
          rm wasi-sdk_11.0_amd64_ubuntu20.04.deb
        shell: bash
      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: --target wasm32-wasi
        env:
          CC_wasm32_wasi: /opt/wasi-sdk/bin/clang
          CARGO_TARGET_WASM32_WASI_LINKER: /opt/wasi-sdk/bin/clang
  build-nightly:
    name: Build Rust nightly
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          profile: minimal
          target: wasm32-wasi
          override: true
      - run: |
          sudo apt install libtinfo5
          wget https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-11/wasi-sdk_11.0_amd64_ubuntu20.04.deb
          sudo dpkg -i wasi-sdk_11.0_amd64_ubuntu20.04.deb
          rm wasi-sdk_11.0_amd64_ubuntu20.04.deb
        shell: bash
      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: --target wasm32-wasi
        env:
          CC_wasm32_wasi: /opt/wasi-sdk/bin/clang
          CARGO_TARGET_WASM32_WASI_LINKER: /opt/wasi-sdk/bin/clang
  build-nightly-wasi-sdk16:
    name: Build Rust nightly with wasi-sdk16
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          profile: minimal
          target: wasm32-wasi
          override: true
      - run: |
          sudo apt install libtinfo5
          wget https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-16/wasi-sdk_16.0_amd64.deb
          sudo dpkg -i wasi-sdk_16.0_amd64.deb
          rm wasi-sdk_16.0_amd64.deb
        shell: bash
      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: --target wasm32-wasi
        env:
          CC_wasm32_wasi: /opt/wasi-sdk/bin/clang
          CARGO_TARGET_WASM32_WASI_LINKER: /opt/wasi-sdk/bin/clang
  build-65-wasi-sdk16:
    name: Build Rust 1.65.0 with wasi-sdk16
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.65.0
          profile: minimal
          target: wasm32-wasi
          override: true
      - run: |
          sudo apt install libtinfo5
          wget https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-16/wasi-sdk_16.0_amd64.deb
          sudo dpkg -i wasi-sdk_16.0_amd64.deb
          rm wasi-sdk_16.0_amd64.deb
        shell: bash
      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: --target wasm32-wasi
        env:
          CC_wasm32_wasi: /opt/wasi-sdk/bin/clang
          CARGO_TARGET_WASM32_WASI_LINKER: /opt/wasi-sdk/bin/clang
